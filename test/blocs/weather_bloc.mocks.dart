// Mocks generated by Mockito 5.2.0 from annotations
// in weather_app/test/blocs/weather_bloc.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app/models/week_weather.dart' as _i3;

import 'weather_bloc.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeClient_0 extends _i1.Fake implements _i2.Client {}

class _FakeWeekWeather_1 extends _i1.Fake implements _i3.WeekWeather {}

/// A class which mocks [WeatherRepositoryMock].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepositoryMock extends _i1.Mock
    implements _i4.WeatherRepositoryMock {
  MockWeatherRepositoryMock() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get httpClient =>
      (super.noSuchMethod(Invocation.getter(#httpClient),
          returnValue: _FakeClient_0()) as _i2.Client);
  @override
  _i5.Future<_i3.WeekWeather> getWeekWeatherByName(String? cityName) =>
      (super.noSuchMethod(Invocation.method(#getWeekWeatherByName, [cityName]),
              returnValue: Future<_i3.WeekWeather>.value(_FakeWeekWeather_1()))
          as _i5.Future<_i3.WeekWeather>);
  @override
  _i5.Future<_i3.WeekWeather> getWeekWeather(String? lat, String? lon) =>
      (super.noSuchMethod(Invocation.method(#getWeekWeather, [lat, lon]),
              returnValue: Future<_i3.WeekWeather>.value(_FakeWeekWeather_1()))
          as _i5.Future<_i3.WeekWeather>);
}
